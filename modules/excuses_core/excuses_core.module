<?php

/**
 * @file
 * A module that defines the excuses, excuses core functionality and various helper functions.
 */

/**
 * Implements hook_menu().
 */
function excuses_core_menu() {
  $menu['random'] = array (
    'title' => 'Excuses, Excuses',
    'page callback' => 'excuses_core_random',
    'access arguments' => array('access content'),
  );

  return $menu;
}


function rating_questions() {
  return array(
    1 => 'Does this excuse read clearly?',
    2 => 'Is this excuse believeable?',
    3 => 'Is this excuse hilarious?',
    4 => 'Is this excuse lame or impossible?',
  );
}


/**
 * The main program loop.
 *
 * Displays a random excuse, provides voting.
 */

function excuses_core_random() {
  $team = isset($_REQUEST['t']) ? $_REQUEST['t'] : '';

  $output = '';

  $excuse = generate_random_excuse();
  $excuse['team'] = $team;

  $output .= '<div id="excuse">' . display_excuse($excuse) . '</div>';
  $output .= drupal_render(drupal_get_form('excuses_core_rating_form', $excuse));

  $output .= display_top_teams($team);

  return $output;
}


/**
 * Format the top teams display, highlighting the user's team if appropriate
 */
function display_top_teams($my_team) {
  $output = '';

  $query = db_query('SELECT name, count FROM {excuses_teams} ORDER BY count DESC LIMIT 10');

  $rows = array();
  foreach ($query as $team) {

    $class = (strtolower($team->name) == strtolower($my_team)) ? 'mine' : 'other';

    $rows[] = array(
      array('data' => $team->name, 'class' => $class),
      array('data' => $team->count, 'class' => $class));
  }

  $output .= '<div class="break"></div>';
  $output .= '<div id="top_header">Top Excuse-Makers</div>';
  $output .= theme('table', array(
               'header' => array(),
               'rows' => $rows
             ));

  return $output;
}


/**
 * Format the sentence for a given excuse.
 */
function display_excuse($excuse) {
  return 'I ' . excuse_text($excuse['yellow']) . ' because ' . excuse_text($excuse['red']) . ' ' . excuse_text($excuse['blue']);
}


/**
 * Get random versions of each excuse part
 */
function generate_random_excuse() {
  $excuse = array();
  $excuse['yellow'] = excuse_fragment_random_yellow();
  $excuse['red'] = excuse_fragment_random_red();
  $excuse['blue'] = excuse_fragment_random_blue();

  return $excuse;
}


/**
 * Excuse form functions
 */
function excuses_core_rating_form($form, &$form_state, $options = array()) {
  $questions = rating_questions();

  foreach(array('red', 'yellow', 'blue') as $key) {
    $form[$key . '_nid'] = array(
      '#type' => 'hidden',
      '#value' => $options[$key]->nid);
    $form[$key . '_vid'] = array(
      '#type' => 'hidden',
      '#value' => $options[$key]->vid);
  }

  foreach ($questions as $key => $value) {
    $form['questions']['q' . $key] = array(
      '#type' => 'radios',
      '#title' => $value,
      '#options' => array('1' => 'Yes', '2' => 'No'),
      '#default_value' => 99,
    );
    $form['questions']['q' . $key . '-spacer'] = array(
      '#markup' => '<div class="break"><hr></div>',
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('I need another excuse!'),
  );

  // if we have a team already, expand our display
  $suffix = isset($options['team']) ? '<div id="team_suffix">has made ' . team_count($options['team']) . ' excuses!</div>' : '';

  $form['team'] = array(
    '#type' => 'textfield',
    '#title' => 'Your Name: ',
    '#size' => 16,
    '#default_value' => (isset($options['team']) ? $options['team'] : ''),
    '#suffix' => $suffix,
  );

  return $form;
}


function excuses_core_rating_form_submit($form, &$form_state) {
  $questions = rating_questions();

  // record the questions and their responses in the appropriate tables
  $answers = 0;
  foreach ($questions as $key => $value) {

    if ($form_state['values']['q' . $key] != 99) {
      // we answered this question; store the responses
      $answers ++;

      $record = array(
        'question' => $key,
        'value' => $form_state['values']['q' . $key],
        'created' => time(),
      );

      foreach(array('red', 'yellow', 'blue') as $color) {
        $record[$color . '_nid'] = $form_state['values'][$color . '_nid'];
        $record[$color . '_vid'] = $form_state['values'][$color . '_vid'];

        $record['nid'] = $form_state['values'][$color . '_nid'];
        $record['vid'] = $form_state['values'][$color . '_vid'];

        drupal_write_record('excuses_rating', $record);

        // have to remove the ID to re-use the data structure on the next iteration
        unset($record['id']);
      }

      // we now have a data structure to write to the combined table as well
      drupal_write_record('excuses_rating_combined', $record);
    }
  }

  if (strlen($form_state['values']['team']) > 0) {
    // if we answered at least one question and have a team, increment our score
    if ($answers > 0) {
      increment_team($form_state['values']['team']);
    }

    // also put our team name in the url
    $form_state['redirect'] = array(
      '',
      array('query' => array('t' => $form_state['values']['team'])));
  }
  else {
    $form_state['redirect'] = array('');
  }
}

function increment_team($team) {
  $count = team_count($team);
  if ($count > 0) {
    db_update('excuses_teams')
      ->expression('count', 'count + :count', array(':count' => 1))
      ->condition('name', $team)
      ->execute();
  }
  else {
    db_insert('excuses_teams')
      ->fields(array(
          'name' => $team,
          'count' => 1,
          'created' => REQUEST_TIME,
        ))
      ->execute();
  }
}

function team_count($team) {
  if (strlen($team) > 0) {
    $result = db_query(
      'SELECT count FROM {excuses_teams} WHERE name = :team',
      array(':team' => $team));
    $team = $result->fetchObject();
    if ($team) {
      return $team->count;
    }
  }
  // fallthrough
  return 0;
}


/**
 * Implementation of hook_preprocess_page()
 */
function excuses_core_preprocess_page(&$variables) {
  $variables['subtitle'] = 'Excuse improvement engine';
  $variables['instructions'] = 'Excuses, Excuses is a card game in development where you build excuses for problems. The Excuse Improvement Engine generates problem and excuse combinations that might be made in the game, and allows you to help us find excuses that don\'t read smoothly--and make the rest better. Thanks for playing this game before the game! -- Seth Johnson, game designer';
  $variables['intro'] = "You're in trouble! Here's the best excuse you've managed to come up with:";
}


/**
 * Implementation of hook_theme().
 */
function excuses_core_theme($existing, $type, $theme, $path) {
  return array(
    'excuse_form' => array(
      'variables' => array('form' => NULL),
    ),
  );
}

function theme_excuse_form($vars) {
  $form = $vars['form'];

  $rows = array();
  foreach (element_children($form['questions']) as $key) {
    //    $rows[] = array('data' => drupal_render($form['questions'][$key]), 'class' => 'question');
    $row = array();
    $row[] = array('data' => 'foo', 'class' => 'bar');
    $row[] = array('data' => 'foo', 'class' => 'bar');
    $rows[] = $row;

  }
  $header = array();
  $header[] = t('Answer what questions you can:');
  $header[] = t('Answer what questions you can:');
  //  print_r2($header);
  //  print_r2($rows);
  //  print_r2(theme('table', $header, $rows));
  //  exit;
  $output = theme('table', $header, $rows);
  $output .= "<hr>";
  $output .= drupal_render($form);
  $output .= "<hr>";
  return $output;

}


/**
 * Excuse fetching functions
 */

function display_random_excuse() {
  return 'I ' . excuse_text(excuse_random_yellow()) . ' because ' . excuse_text(excuse_random_red()) . ' ' . excuse_text(excuse_random_blue());
}

function excuse_text($obj) {
  return strtolower($obj->title);
}

function excuse_fragment_random_yellow() {
  return _excuse_fragment_random_helper('problem_cards');
}

function excuse_fragment_random_red() {
  return _excuse_fragment_random_helper('red_excuse');
}

function excuse_fragment_random_blue() {
  return _excuse_fragment_random_helper('blue_excuse');
}

function _excuse_fragment_random_helper($type) {
  $result = db_query("SELECT * FROM {node}
                      WHERE type = :type
                      ORDER BY RAND()
                      LIMIT 1",
            array(':type' => $type));
  return $result->fetchObject();
}


function print_r2($val){
  echo '<pre>';
  print_r($val);
  echo  '</pre>';
}